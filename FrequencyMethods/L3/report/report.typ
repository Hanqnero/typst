#import "style.typ"
#import "titlepage.typ"

#show: style.ReportStyle

#titlepage.TitlePage(
  [Лабораторная работа №3: Жёсткая фильтрация],
  [Смирнов Алексей Владимирович],
  [409578],
  [R3242]
)
#titlepage.OutlinePage()

= Задание 1. Жёсткие фильтры

Рассмотрим функцию $g$:
$
  g(t) = cases(
    a", "t in [t_1, t_2],
    0", "t in.not [t_1, t_2]
    )
$
выбрав конкретные значения параметров
$
  a = 1, \
  t_1 = -1/2 \
  t_2 = 1/2
$

а также зашумленную версию функции $g$:
$
  u(t)  = g(t) + b xi(t) + c sin(omega t)
$
где $xi (t) ~ cal(U)[-1, 1]$ - равномерное распределение представляющее собой белый шум, а значения $b$, $c$, $omega$.

Выполним жёсткую фильтрацию сигнала
+ Найдем Фурье-образ функции $u(t)$
+ Обнулим его значения на некоторых диапазонах
+ Восстановим сигнала обратным преобразованием.

== Фильтр низких частот 

Применим $c=0$. И обнулим значения Фурье-образа функции
за пределами некоторого диапазона $[-nu_0, nu_0]$.

Построим графики функции до и после фильтра, а также их Фурье-Образы. 
На графиках указаны значения параметров $b$ и $nu_0$.

#for N in (1, 2, 3, 4) {
  let filename = ("../fig/1/1/%s.svg").replace("%s", str(N))
  figure(
    image(filename),
    caption: [Пример фильтра низких частот №#str(N)]
  )
}

Сравнив графики с разными значениями параметров, можем 
прийти к следующим выводам о их влиянии на результат:
- #[
  Добавленный белый шум к фукции добавляет белый шум её Фурье-Образу
  на всем диапазоне частот.
]
- Амплитуда $b$ шума функции влияет на амлпитуду шума у Фурье-образа.
- #[
  Чем меньше нетронутый интервал $[-nu_0, nu_0]$, 
  тем более гладкой получается фильтрованная функция.]
- #[
  Чем больше параметр $b$ --- амплитуда шума, тем сложнее
  избавиться от него: приходится выбирать такой интервал, где
  образ функции $g(t)$ больше образа добавленного шума.
]

== Фильтр специфических частот

В этом пункте будем обнулять значения Фурье-образа на специфических частотах.

Рассмотрим разные случаи:

==== Случай $b=0$

#figure(
  image("../fig/1/2/1.svg"),
  caption: [Фильтр специфических частот №1]
)

Видно, что слагаемое $c sin (omega t)$ добавляет Фурье-Образу функции
два пика в $nu= plus.minus omega$ от которых можем легко избавиться обнулив
значение Фурье-образа в их окрестности. 

Для остальных случаем будем принимать $b eq.not 0$ и комбинацию фильтра 
низких и специфических частот.

==== Вариация $omega$

#for N in (2,3) {
  let filename = "../fig/1/2/%s.svg".replace("%s", str(N))
  figure(
    image(filename),
    caption: [Пример фильтра специфических частот №#str(N)]
  )
}

==== Вариация $c$

#for N in (4,5) {
  let filename = "../fig/1/2/%s.svg".replace("%s", str(N))
  figure(
    image(filename),
    caption: [Пример фильтра специфических частот №#str(N)]
  )
}

==== Вариация $b$

#for N in (6,7) {
  let filename = "../fig/1/2/%s.svg".replace("%s", str(N))
  figure(
    image(filename),
    caption: [Пример фильтра специфических частот №#str(N)]
  )
}

== Фильтр высоких частот

Попробуем обнулить симметричный интервал $[-nu_0, nu_0]$.

Для данной функции $u(t)$ возможны 3 различных случая:

==== Остается только белый шум

#figure(
  image("../fig/1/3/1.svg"),
  caption: [Пример фильтра высоких частот №1]
)

==== Убираются основные частоты незашумленного сигнала

#figure(
  image("../fig/1/3/2.svg"),
  caption: [Пример фильтра высоких частот №2]
)

==== Часть основных частот незашумленного сигнала попадает в фильтр

#figure(
  image("../fig/1/3/3.svg"),
  caption: [Пример фильтра высоких частот №3]
)

= Задание 2. Фильтрация звука

В этом задании воспользуемся этими тремя фильтрами чтобы избавиться
от шумов в аудио-сигнале, сохранив при этом речь.


#figure(
  image("../fig/2/1.svg"),
  caption: [Визуализация исходного аудио-сигнала],
) 

В исходном сигнале присутствует громкий низкочастотный шум,
это также подтверждает наличие пиков на низких частотах у
Фурье-Образа исходного сигнала.

Чтобы лучше увидеть остальные частоты на образе сигнала изменим 
масштаб:

#figure(
  image("../fig/2/2.svg")
)

== Низкочастотный шум

Подобрали такой фильтр высоких частот, чтобы избавиться от основного шума
в сигнале. Ему соответствовал диапазон частот 0 --- 300 Гц.

#figure(
  image("../fig/2/3.svg"),
  caption: [Сигнал после удаления диапазона частот 0 --- 300 Гц]
)

== Высокочастотный шум

На этом этапе уже можно отчётливо разобрать речь, но
всё ещё присутствуют другой шум --- пульсирующий шум высокой частоты.
Чтобы избавиться от него применим фильтр низких частот. 
Этот шум присутсвует на диапазоне, начинающимся на частоте примерно
6100 Гц и вплоть до максимальной частоты, которую можем получить
при данной частоте дискретизации.

Применим фильтр нижних частот с порогом 6100 Гц чтобы избавиться от него.

#figure(
  image("../fig/2/4.svg"),
  caption: [Сигнал после удаления частот выше 6100 Гц]
)

После применения этих двух фильтров в сигнале нет явных шумов, речь отчётливо
слышна. Дальнейшая фильтрация нецелесообразна, так как удаление частот приведёт
к ухудшению качества речи.

== Результат

#figure(
  image("../fig/2/5.svg"),
  caption: [ Сравнение исходного сигнала с результатом ]
)

= Приложение 

Исходные коды программ, изображения и аудиофайлы
можно найти в Git-Репозитории по адресу:

#show link: underline
#show link: text.with(fill: blue)

#link("https://github.com/Hanqnero/typst/tree/master/FrequencyMethods/L3")